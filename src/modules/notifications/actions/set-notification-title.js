/**
 * @todo Write titles
 * @todo Determine if enum names need to include contract name
 */

const notificationTitlesEnum = {
  // Augur
  AUGUR_CREATEGENESISUNIVERSE: '',
  // CancelOrder
  CANCELORDER_CANCELORDER: '',
  // Cash
  CASH_APPROVE: '',
  CASH_DECREASEAPPROVAL: '',
  CASH_INCREASEAPPROVAL: '',
  CASH_WITHDRAWETHERTOIFPOSSIBLE: '',
  // ClaimTradingProceeds
  CLAIMTRADINGPROCEEDS_CALCULATEREPORTINGFEE: '',
  CLAIMTRADINGPROCEEDS_CLAIMTRADINGPROCEEDS: '',
  // CompleteSets
  COMPLETESETS_PUBLICBUYCOMPLETESETS: '',
  COMPLETESETS_PUBLICBUYCOMPLETESETSWITHCASH: '',
  COMPLETESETS_PUBLICSELLCOMPLETESETS: '',
  COMPLETESETS_PUBLICSELLCOMPLETESETSWITHCASH: '',
  // CreateOrder
  CREATEORDER_PUBLICCREATEORDER: '',
  // DisputeCrowdsourcer
  DISPUTECROWDSOURCER_FORKANDREDEEM: '',
  DISPUTECROWDSOURCER_REDEEM: '',
  DISPUTECROWDSOURCER_WITHDRAWINEMERGENCY: '',
  // FeeWindow
  FEEWINDOW_BUY: '',
  FEEWINDOW_REDEEM: '',
  FEEWINDOW_WITHDRAWINEMERGENCY: '',
  // FillOrder
  FILLORDER_PUBLICFILLORDER: '',
  // InitialReporter
  INITIALREPORTER_FORKANDREDEEM: '',
  INITIALREPORTER_REDEEM: '',
  INITIALREPORTER_TRANSFEROWNERSHIP: '',
  INITIALREPORTER_WITHDRAWINEMERGENCY: '',
  // Mailbox
  MAILBOX_TRANSFEROWNERSHIP: '',
  MAILBOX_WITHDRAWETHER: '',
  MAILBOX_WITHDRAWTOKENS: '',
  // Market
  MARKET_CONTRIBUTE: '',
  MARKET_DISAVOWCROWDSOURCERS: '',
  MARKET_DOINITIALREPORT: '',
  MARKET_FINALIZE: '',
  MARKET_FINALIZEFORK: '',
  MARKET_MIGRATETHROUGHONEFORK: '',
  MARKET_TRANSFEROWNERSHIP: '',
  MARKET_WITHDRAWINEMERGENCY: '',
  // ReputationToken
  REPUTATIONTOKEN_APPROVE: '',
  REPUTATIONTOKEN_DECREASEAPPROVAL: '',
  REPUTATIONTOKEN_INCREASEAPPROVAL: '',
  REPUTATIONTOKEN_MIGRATEFROMLEGACYREPUTATIONTOKEN: '',
  REPUTATIONTOKEN_MIGRATEOUT: '',
  REPUTATIONTOKEN_MIGRATEOUTBYPAYOUT: '',
  REPUTATIONTOKEN_TRANSFER: '',
  REPUTATIONTOKEN_TRANSFERFROM: '',
  REPUTATIONTOKEN_UPDATEPARENTTOTALTHEORETICALSUPPLY: '',
  REPUTATIONTOKEN_UPDATESIBLINGMIGRATIONTOTAL: '',
  // ShareToken
  SHARETOKEN_APPROVE: '',
  SHARETOKEN_DECREASEAPPROVAL: '',
  SHARETOKEN_INCREASEAPPROVAL: '',
  SHARETOKEN_TRANSFER: '',
  SHARETOKEN_TRANSFERFROM: '',
  // Trade
  TRADE_PUBLICBUY: '',
  TRADE_PUBLICBUYWITHLIMIT: '',
  TRADE_PUBLICSELL: '',
  TRADE_PUBLICSELLWITHLIMIT: '',
  TRADE_PUBLICTRADE: '',
  PUBLICTRADEWITHLIMIT: 'TESTING!!!',
  TRADE_PUBLICFILLBESTORDER: '',
  TRADE_PUBLICFILLBESTORDERWITHLIMIT: '',
  // TradingEscapeHatch
  TRADINGESCAPEHATCH_CLAIMSHARESINUPDATE: '',
  TRADINGESCAPEHATCH_GETFROZENSHAREVALUEINMARKET: '',
  // Universe
  UNIVERSE_CREATECATEGORICALMARKET: '',
  UNIVERSE_CREATECHILDUNIVERSE: '',
  UNIVERSE_CREATESCALARMARKET: '',
  UNIVERSE_CREATEYESNOMARKET: '',
  UNIVERSE_GETINITIALREPORTSTAKESIZE: '',
  UNIVERSE_GETORCACHEDESIGNATEDREPORTNOSHOWBOND: '',
  UNIVERSE_GETORCACHEDESIGNATEDREPORTSTAKE: '',
  UNIVERSE_GETORCACHEMARKETCREATIONCOST: '',
  UNIVERSE_GETORCACHEREPORTINGFEEDIVISOR: '',
  UNIVERSE_GETORCACHEVALIDITYBOND: '',
  UNIVERSE_GETORCREATECURRENTFEEWINDOW: '',
  UNIVERSE_GETORCREATEFEEWINDOWBYTIMESTAMP: '',
  UNIVERSE_GETORCREATENEXTFEEWINDOW: '',
  UNIVERSE_GETORCREATEPREVIOUSFEEWINDOW: '',
  UNIVERSE_REDEEMSTAKE: '',
}

export default function setNotificationTitle(notification, callback) {
  return (dispatch, getState) => {
    // console.log('NOTIFICATION: ', notification)
    if (!notification) {
      throw new Error('Notification is not set')
    }
    if (!callback) {
      throw new Error('Callback function is not set')
    }
    if (!notification.title) {
      dispatch(callback(notification))
    }

    const notificationTitleKey = notification.title.toUpperCase()
    if (notificationTitlesEnum[notificationTitleKey]) {
      notification.title = notificationTitlesEnum[notificationTitleKey]
    } else {
      // Change notification title from camel case to regular case
      const result = notification.title.replace(/([A-Z])/g, ' $1')
      notification.title = result.charAt(0).toUpperCase() + result.slice(1)
    }
    dispatch(callback(notification))
  }
}
